/*
  You are given a rectangular matrix mat[][] of size n x m, and your task is to return an array while traversingÂ the matrix in spiral form.
Input: mat[][] = [[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12], 
                [13, 14, 15, 16]]
Output: [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]

Input: mat[][] = [[2, 7, 10],
                [5, 1, 3],
                [4, 2, 8]]
Output: [2, 7, 10, 3, 8, 2, 4, 5, 1]

*/

class Solution {
    public ArrayList<Integer> spirallyTraverse(int[][] mat) {
        // code here
        ArrayList<Integer> res = new ArrayList<>();
        
        int n = mat.length;
        int m = mat[0].length;
        
        int i=0;
        int j=0;
        int rsteps = n-1;
        int csteps = m-1;
        
        while(rsteps >= 1 && csteps >=1){
            
            for(int k=0; k<csteps; k++){
                res.add(mat[i][j]);
                j++;
            }
            
            for(int k=0; k<rsteps; k++){
                res.add(mat[i][j]);
                i++;
            }
            
            for(int k=0; k<csteps; k++){
                res.add(mat[i][j]);
                j--;
            }
            
            for(int k=0; k<rsteps; k++){
                res.add(mat[i][j]);
                i--;
            }
            
            i++;
            j++;
            rsteps = rsteps-2;
            csteps = csteps-2;
            
        }
        
        if(rsteps == 0){
            for(int k = 0; k<=csteps; k++){
                res.add(mat[i][j]);
                j++;
            }
        }else if(csteps == 0){
            for(int k=0; k<=rsteps; k++){
                res.add(mat[i][j]);
                i++;
            }
        }
        
        return res;
        
    }
}
