/*
LEETCODE:229

Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]

*/

class Solution {
    public List<Integer> majorityElement(int[] nums) {

        List<Integer> ls = new ArrayList<>();
        int n =nums.length;

        int val1 = nums[0];
        int count1 = 1;
        int val2 = -10;
        int count2 = 0;

        for(int i=1; i<n; i++){

            if(nums[i] == val1){
                count1++;
            }else if(nums[i] == val2){
                count2++;
            }else if(count1 == 0){
                val1 = nums[i];
                count1 = 1;
            }else if(count2 == 0){
                val2 = nums[i];
                count2 = 1;
            }else{
                count1--;
                count2--;
            }

        }


        int c1=0;
        for(int i=0; i<n; i++){
            if(nums[i] == val1){
                c1++;
            }
        }

        if(c1 > n/3){
            ls.add(val1);
        }

        int c2 =0;
        for(int i=0; i<n; i++){
            if(nums[i] == val2){
                c2++;
            }
        }

        if(c2> n/3){
            ls.add(val2);
        }

        return ls;
        
    }
}
