/*
  GFG Problem
  Given an array of integers arr[]. You have to find the Inversion Count of the array. 
  Note : Inversion count is the number of pairs of elements (i, j) such that i < j and arr[i] > arr[j].

Examples:

Input: arr[] = [2, 4, 1, 3, 5]
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 has three inversions (2, 1), (4, 1), (4, 3).

Input: arr[] = [2, 3, 4, 5, 6]
Output: 0
Explanation: As the sequence is already sorted so there is no inversion count.

Input: arr[] = [10, 10, 10]
Output: 0
Explanation: As all the elements of array are same, so there is no inversion count.

*/


class Solution {
    
    static int inversionCount(int arr[]) {
        
        int s = 0;
        int e = arr.length-1;
        
        return mergeSort(arr,s,e);
        
       
       
    }
    
    static int mergeSort(int[] arr,int s,int e){
        int count =0;
        if(s<e){
            int m = s+(e-s)/2;
            
            count += mergeSort(arr, s, m);
            count += mergeSort(arr, m+1, e);
            
            count += merge(arr,s,m,e);
        }
        
        return count;
     
    }
    
    static int merge(int[] arr,int s,int m,int e){
        int ans = 0;
        int[] temp = new int[e-s+1];
        
        int p1 = s;
        int p2 = m+1;
        int p3 =0;
        
        while(p1<=m && p2<=e){
            
            if(arr[p1] <= arr[p2]){
                temp[p3] = arr[p1];
                p3++;
                p1++;
            }else{
                ans = ans+(m-p1+1);
                temp[p3] = arr[p2];
                p3++;
                p2++;
            }
        }
        
        while(p1 <= m){
            temp[p3] = arr[p1];
            p1++;
            p3++;
        }
        
        while(p2 <= e){
            temp[p3] = arr[p2];
            p2++;
            p3++;
        }
        
        int idx = s;
        
        for(int i=0; i<temp.length; i++){
            arr[idx] = temp[i];
            idx++;
            
        }
        
        return ans;
        
    }
}
